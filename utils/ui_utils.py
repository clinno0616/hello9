# utils/ui_utils.py
import streamlit as st
import torch
from pathlib import Path
from typing import Dict, Any, Tuple

def create_style():
    """
    設置自定義 CSS 樣式
    """
    st.markdown("""
        <style>
        .stTextInput > label {
            font-size: 16px;
            font-weight: bold;
            color: #333;
        }
        .stTextArea > label {
            font-size: 16px;
            font-weight: bold;
            color: #333;
        }
        .stSlider > label {
            font-size: 16px;
            font-weight: bold;
            color: #333;
        }
        .stSelectbox > label {
            font-size: 16px;
            font-weight: bold;
            color: #333;
        }
        .stButton > button {
            width: 100%;
            padding: 0.5rem 1rem;
            font-size: 18px;
        }
        .output-image {
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin: 1rem 0;
        }
        .css-1aehpvj {
            color: #333;
            font-size: 14px;
        }
        .css-1aehpvj code {
            color: #1f1f1f;
            background-color: #f0f2f6;
            padding: 2px 6px;
            border-radius: 4px;
        }
        </style>
    """, unsafe_allow_html=True)

def show_system_info():
    """
    顯示系統資訊
    """
    with st.sidebar.expander("系統資訊", expanded=False):
        if torch.cuda.is_available():
            gpu_info = torch.cuda.get_device_properties(0)
            memory_allocated = torch.cuda.memory_allocated() / (1024**3)
            memory_total = torch.cuda.get_device_properties(0).total_memory / (1024**3)
            
            st.write(f"🎮 GPU: {gpu_info.name}")
            st.write(f"💾 VRAM: {memory_allocated:.2f}GB / {memory_total:.2f}GB")
            st.write(f"🚀 CUDA: {torch.version.cuda}")
        else:
            st.write("❌ GPU: 不可用")
            
        st.write(f"⚡ PyTorch: {torch.__version__}")

def show_error_message(message: str):
    """
    顯示錯誤訊息
    """
    st.error(f"❌ {message}", icon="🚨")

def show_success_message(message: str):
    """
    顯示成功訊息
    """
    st.success(f"✅ {message}", icon="🎉")

def show_image_info(params: Dict[str, Any]):
    """
    顯示圖片生成參數資訊，包含 LoRA 資訊
    """
    with st.expander("生成參數", expanded=False):
        # 準備基本參數
        formatted_params = {
            "模型": params.get("model", "unknown"),
            "提示詞": params.get("prompt", ""),
            "負面提示詞": params.get("negative_prompt", ""),
            "寬度": params.get("width", 512),
            "高度": params.get("height", 512),
            "CFG Scale": params.get("cfg_scale", 7.0),
            "步數": params.get("steps", 20),
            "隨機種子": params.get("seed", -1),
            "採樣方法": params.get("sampler", "Euler a")
        }
        
        # 添加 LoRA 資訊
        if "loras" in params and params["loras"]:
            lora_info = {f"LoRA {i+1}": f"{name} (權重: {weight})" 
                        for i, (name, weight) in enumerate(params["loras"])}
            formatted_params.update(lora_info)
            
        st.json(formatted_params)

def create_prompt_templates() -> str:
    """
    創建提示詞模板選擇器
    
    Returns:
        選擇的模板內容
    """
    templates = {
        "無": "",
        "風景照": "A beautiful landscape photo, professional photography, 8k, highly detailed, amazing lighting",
        "動漫風格": "anime style, highly detailed, vibrant colors, masterpiece, best quality",
        "油畫風格": "oil painting style, masterpiece, highly detailed, classical art, museum quality",
        "科幻風格": "sci-fi style, futuristic, highly detailed, concept art, intricate details",
        "寫實風格": "photorealistic, highly detailed, 8k uhd, professional photography, realistic lighting",
        "水墨畫風格": "Chinese ink painting, traditional art style, minimalist, elegant, black and white",
        "3D 渲染": "3D render, octane render, highly detailed, professional lighting, 8k resolution",
        "像素藝術": "pixel art style, retro gaming, 16-bit, crisp pixels, vibrant colors"
    }
    
    selected_template = st.sidebar.selectbox(
        "提示詞模板",
        options=list(templates.keys()),
        index=0
    )
    
    return templates[selected_template]

def create_advanced_settings() -> Dict[str, Any]:
    """
    創建進階設定面板，包含 LoRA 相關設定
    """
    with st.sidebar.expander("進階設定", expanded=False):
        # 基本設定
        enable_watermark = st.checkbox("添加浮水印", value=False)
        watermark_text = st.text_input("浮水印文字", value="Generated by SD") if enable_watermark else ""
        
        enable_auto_save = st.checkbox("自動保存", value=True)
        output_dir = st.text_input("保存目錄", value="outputs") if enable_auto_save else "outputs"
        
        # LoRA 相關設定
        st.subheader("LoRA 進階設定")
        enable_lora_debug = st.checkbox("顯示 LoRA 調試信息", value=False)
        
        # 高級采樣設置
        enable_karras_sigmas = st.checkbox("使用 Karras 調度", value=True)
        use_fp16 = st.checkbox("使用半精度 (FP16)", value=True)
        
        return {
            "enable_watermark": enable_watermark,
            "watermark_text": watermark_text,
            "enable_auto_save": enable_auto_save,
            "output_dir": output_dir,
            "enable_karras_sigmas": enable_karras_sigmas,
            "use_fp16": use_fp16,
            "enable_lora_debug": enable_lora_debug
        }

def create_help_section():
    """
    創建說明文件區段，包含 LoRA 使用說明
    """
    with st.sidebar.expander("使用說明", expanded=False):
        st.markdown("""
        ### 使用步驟
        1. 選擇想要使用的基礎模型
        2. 選擇並設定 LoRA 模型（可選）
        3. 調整生成參數
        4. 輸入提示詞
        5. 點擊生成按鈕
        
        ### LoRA 使用說明
        - LoRA（Low-Rank Adaptation）是一種模型微調技術
        - 可以同時使用多個 LoRA 模型
        - LoRA 權重範圍為 0.0-2.0：
          - 1.0: 正常強度
          - <1.0: 降低效果
          - >1.0: 增強效果
        - LoRA 模型請放置於 /lora 目錄中
        
        ### 參數說明
        - **Width/Height**: 生成圖片的尺寸
        - **CFG Scale**: 提示詞引導強度，值越大越遵循提示詞
        - **Sampling Steps**: 生成步數，步數越多品質越好
        - **Seed**: 隨機種子，-1 為隨機，固定值可重現結果
        - **Sampling Method**: 採樣方法，影響生成品質和速度
        
        ### 提示詞技巧
        1. 使用英文撰寫可以獲得更好的效果
        2. 用逗號分隔不同的描述元素
        3. 可以使用提示詞模板作為參考
        4. 重要的描述放在前面
        5. 可以使用風格詞增強效果
        
        ### 常用風格詞
        - `masterpiece`: 提升整體品質
        - `highly detailed`: 增加細節
        - `best quality`: 提升品質
        - `professional photography`: 攝影風格
        - `8k`: 提高解析度
        
        ### 負面提示詞建議
        常用的負面提示詞：
        ```
        lowres, bad anatomy, bad hands, text, error, missing fingers, 
        extra digit, fewer digits, cropped, worst quality, low quality, 
        normal quality, jpeg artifacts, signature, watermark, username, 
        blurry, bad feet
        ```
        """)

def get_image_size_warning(width: int, height: int) -> str:
    """
    根據圖片大小返回警告訊息
    
    Args:
        width: 圖片寬度
        height: 圖片高度
        
    Returns:
        警告訊息，如果沒有問題則返回空字符串
    """
    total_pixels = width * height
    max_pixels = 1024 * 1024
    
    if total_pixels > max_pixels:
        return "⚠️ 警告：圖片尺寸較大，可能需要較多 VRAM 和較長生成時間"
    return ""

def format_time(seconds: float) -> str:
    """
    格式化時間
    
    Args:
        seconds: 秒數
        
    Returns:
        格式化後的時間字符串
    """
    if seconds < 60:
        return f"{seconds:.1f} 秒"
    minutes = int(seconds / 60)
    seconds = seconds % 60
    return f"{minutes} 分 {seconds:.1f} 秒"